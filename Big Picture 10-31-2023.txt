Codename: CRAB - Web Crawler & Scraper Engine

•	Language: GoLang
1. Search, Pull & Subscribe (search_subscribe.go):
•	Purpose: Handles the operations for actively seeking out web content.
•	Methods:
•	SearchContent(query string)
•	PullContent(url string)
•	SubscribeToContent(source string)
2. Data Structuring (data_structure.go):
•	Purpose: Organizes raw web content into structured formats suitable for analysis.
•	Methods:
•	StructureContent(rawContent string)
•	IndexContent(structuredData Data)
•	CatalogDomains(structuredData Data)
3. Taxonomies Management (taxonomies.go):
•	Purpose: Manages the classifications of data into defined categories.
•	Methods:
•	ClassifyData(structuredData Data)
•	UpdateTaxonomies(newTaxonomy Taxonomy)
4. Threading (threading.go):
•	Purpose: Ensures simultaneous operations for improved performance.
•	Methods:
•	ExecuteInThread(task Task)

Nov 7: Add encoding (64 bit) to the input.

==========================================================================================================================================

Codename: CUDA – Confidence Engine Swarm Intelligence

•	Language: GoLang
5.	Confidence Engine (confidence_engine.go):
•	Purpose: Calculates the confidence level of sourced data.
•	Methods:
•	CalculateConfidence(input ConfidenceInput)
•	FetchDataSource(id uuid.UUID)
2. Data Mapping (data_mapping.go):
•	Purpose: Maps raw data to the data source for easier management.
•	Methods:
•	MapDataToDataSource(raw RawData)
3. Filtering and Rules (filters_rules.go):
•	Purpose: Implements filtering and rule-based criteria for data.
•	Methods:
•	ApplyFilter(data DataSource, criteria FilterCriteria)
•	ApplyRules(data DataSource, rules []Rule)
4. Spatial Representation (spatial_representation.go):
•	Purpose: Represents data in a spatial format for analysis.
•	Methods:
•	MapToSpatial(data DataSource)
5. Business Logic (business_logic.go):
•	Purpose: Incorporates the business’s specific requirements and rules.
•	Methods:
•	ApplyBusinessRules(data DataSource)
 	


==========================================================================================================================================

Codename: CARP - Distribution Center

•	Language: GoLang
1. Subscribe Service (subscribe_service.go):
•	Purpose: Manages subscriptions for external consumers of the data.
•	Methods:
•	RegisterSubscription(subscription Subscription)
•	PushUpdates(subscriptionId uuid.UUID)
2. Restful Web Service API Pull (rest_api.go):
•	Purpose: Provides a RESTful interface for pulling data.
•	Methods:
•	GetData(request DataRequest)
3. Authentication Handling (authentication.go):
•	Purpose: Manages the authentication of external requests and subscriptions.
•	Methods:
•	AuthenticateRequest(request HttpRequest)
________________________________________
DAL - Data Access Layer API
•	Language: GoLang
1. MySQL Relational Table Management (mysql_manager.go):
•	Purpose: Interfaces with the MySQL database for CRUD operations.
•	Methods:
•	InsertData(data Data)
•	QueryData(query SqlQuery)
•	UpdateData(data Data)

______________________________________________________________________
Other Domains with application (ignore for now):

## Weather (Weather Pattern Forecast)
- **User Interaction**: Weather forecast request.
- **ML Algorithms**: ARIMA for Time Series Forecasting, Neural Networks.
- **Flow**:
  - Web UI → CUDA: Routes the forecast request.
  - CUDA → CRAB: Requests historical weather data.
  - CRAB → DAL/SQL: Pulls weather data.
  - DAL/SQL → CRAB: Delivers the data.
  - CUDA: Uses forecasting models to predict weather.
  - User: Receives the weather forecast.

## Social Media (Sentiment Analysis and Collaborative Filtering)
- **User Interaction**: Sentiment analysis request for a trending topic.
- **ML Algorithms**: NLP for Sentiment Analysis, Collaborative Filtering for personalized content recommendation.
- **Flow**:
  - Web UI → CUDA: Transmits the user's request.
  - CUDA → CRAB: Gathers relevant social media posts.
  - CRAB → DAL/SQL: Retrieves data from the database.
  - DAL/SQL → CRAB: Sends back the data.
  - CUDA: Performs sentiment analysis and applies collaborative filtering.
  - User: Gets sentiment results and content recommendations.


## News and Articles (Trend Detection)
- **User Interaction**: Query for latest trends in news.
- **ML Algorithms**: NLP for Topic Modeling, SVM for Classification.
- **Flow**:
  - Web UI → CUDA: Processes the query.
  - CUDA → CRAB: Requests recent news articles.
  - CRAB → DAL/SQL: Pulls the latest articles.
  - DAL/SQL → CRAB: Delivers the articles.
  - CUDA: Applies trend detection algorithms.
  - User: Receives the trending topics.
